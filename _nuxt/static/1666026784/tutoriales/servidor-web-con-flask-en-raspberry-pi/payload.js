__NUXT_JSONP__("/tutoriales/servidor-web-con-flask-en-raspberry-pi", (function(a,b,c,d,e,f,g,h,i,j,k,l){c[0]="migueabellan";l.cdate="2019-04-01 00:00:00";l.mdate="2019-10-26 14:05:12";return {data:[{tutorial:{alias:"servidor-web-con-flask-en-raspberry-pi",title:a,description:b,image:"img\u002Fpreview.jpg",category:"raspberry-pi",contributors:c,tags:{technology:[d,e],hardware:[f],software:[g],level:[h,i],others:[j]},extra:{level:"Avanzado",duration:"60 minutos",videos:k},date:l},title:a,description:b,image:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fservidor-web-con-flask-en-raspberry-pi\u002Fimg\u002Fpreview.jpg",date:l,tags:[d,e,f,g,h,i,j],editLink:"https:\u002F\u002Fgithub.com\u002FProgramoErgoSum\u002FTutoriales\u002Fedit\u002Fmaster\u002Fv1\u002Fservidor-web-con-flask-en-raspberry-pi\u002FREADME.md",contributors:c,raw:"## Introducción\n\nEn este tutorial vamos a explicar cómo montar un servidor web para Python con Flask en nuestra Raspberry Pi.\n\n### Antes de empezar\n\nPara este tutorial vas a necesitar los siguientes componentes:\n\n- Raspberry Pi con Raspbian\n\nEs recomendable acceder a los siguientes tutoriales:\n\n- Aprender a programar en Python en [AprendeProgramando](https:\u002F\u002Fwww.aprendeprogramando.es\u002Fcursos-online\u002Fpython)\n\n### Servidor Web con Flask\n\nFlask es un microframework creado para facilitar el desarrollo de aplicaciones web en Python. Es utilizado normalmente para construir servicios web como APIs REST o aplicaciones de contenido estático.\n\n![](img\u002Fflask.jpg \"Servidor Web con Flask\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Instalar Flask\n\n\u003E Antes de instalar cualquier software es conveniente actualizar la Raspberry Pi como se explica en el tutorial Raspberry Pi - Raspbian - Update\n\nUna vez actualizada instalamos el servidor de Flask para Python 3.\n\n```sh\npi@raspberrypi:~ $ sudo apt install python3-flask\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Hola Mundo\n\nEl primer ejemplo que vamos a crear es el típico \"Hola Mundo\", es decir, vamos a crear un servicio o ruta para que al acceder a una determinada URL se muestre por la pantalla dicho mensaje. Para ello, vamos a crear dentro del directorio `web` creado en nuestra carpeta del escritorio, un fichero llamado `index.py` con el siguiente código en Python.\n\n```\n├ web\u002F\n└── index.py\n```\n\n```python\nfrom flask import *\napp = Flask(__name__)\n\n@app.route('\u002F')\ndef home():\n   return '¡Hola Mundo!'\n\nif __name__ == '__main__':\n   app.run(host='0.0.0.0', port=8000, debug=True)\n```\n\nComo hemos dicho, Flask se utiliza para servicios o rutas, en este caso, hemos creado el servicio sobre la URL principal `@app.route('\u002F')` seguido de la función que ejecutará el servicio, en este caso, devolver el mensaje 'Hola Mundo' que será mostrado por la pantalla al ejecutar el código y acceder mediante el navegador a la dirección `localhost:8000`. También podrás acceder sobre la propia IP `xxx.xxx.xxx.xxx:8000` en un dispositivo situado en la misma red.\n\n```\nURL: localhost:8000\n```\n\n![](img\u002Fhola-mundo.jpg \"Hola Mundo\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Añadir un template HTML\n\nEn ocasiones nos vemos en la necesidad de generar el código HTML como fichero externo para mostrar una web con su estructura en HTML, código CSS y JS, etc. Para ello debemos renderizar el template en la función y crear un fichero dentro de una carpeta llamada `templates`. Dentro de esta crearemos el fichero con el código HTML, por ejemplo `home.html`.\n\n```\n├ web\u002F\n├── templates\n│   └── home.html\n└── index.py\n```\n\n```python\nfrom flask import *\napp = Flask(__name__)\n\n@app.route('\u002F')\ndef home():\n   return render_template('home.html')\n\nif __name__ == '__main__':\n   app.run(host='0.0.0.0', port=8000, debug=True)\n```\n\n```html\n\u003Chtml\u003E\n\u003Chead\u003E\n   \u003Ctitle\u003EHola Mundo\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n   \u003Ch1\u003E¡Hola Mundo!\u003C\u002Fh1\u003E\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n```\n\n```\nURL: localhost:8000\n```\n\n![](img\u002Ftemplate.jpg \"Template\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Añadir otra ruta\n\nDe momento solamente estamos accediendo a la ruta principal `\u002F`. Supongamos que queremos acceder a otra ruta `\u002Fquien-soy` donde se muestra información adicional. En este caso necesitamos añadir una nueva función al fichero principal de nuestra aplicación así como un nuevo template donde mostrar dicha información.\n\n```\n├ web\u002F\n├── templates\n│   ├── quien.html\n│   └── home.html\n└── index.py\n```\n\n```python\nfrom flask import *\napp = Flask(__name__)\n\n@app.route('\u002F')\ndef home():\n   return render_template('home.html')\n\n@app.route('\u002Fquien-soy')\ndef quien():\n   return render_template('quien.html')\n\nif __name__ == '__main__':\n   app.run(host='0.0.0.0', port=8000, debug=True)\n```\n\n```html\n\u003Chtml\u003E\n\u003Chead\u003E\n   \u003Ctitle\u003EQuien soy\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n   \u003Ch1\u003EHola me llamo Migue\u003C\u002Fh1\u003E\n   \n   \u003Ca href=\"\u002F\"\u003EAl hacer clic aquí te lleva al home\u003C\u002Fa\u003E\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n```\n\n```\nURL: localhost:8000\u002Fquien-soy\n```\n\n![](img\u002Frutas.jpg \"Rutas\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Pasar parámetros al template\n\nEn ocasiones nos gustaría pasar parámetros desde el código principal al template. Para ello, al renderizar el template tenemos que añadirle un array con los valores que serán leídos en el HTML.\n\n```python\nfrom flask import *\napp = Flask(__name__)\n\n@app.route('\u002F')\ndef home():\n   templateData = {\n      'titulo' : 'Hola Mundo',\n      'numero' : 5\n   }\n   return render_template('home.html', **templateData)\n\nif __name__ == '__main__':\n   app.run(host='0.0.0.0', port=8000, debug=True)\n```\n\n```html\n\u003Chtml\u003E\n\u003Chead\u003E\n   \u003Ctitle\u003EHola Mundo\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n   \u003Cp\u003ESi la variable número \"{{ numero }}\" es igual a 5 se mostrará el título a continuación.\u003C\u002Fp\u003E\n   \n   {% if numero == 5 %}\n      \u003Ch1\u003ESe muestra: {{ titulo }}\u003C\u002Fh1\u003E\n   {% else %}\n      \u003Ch1\u003ENO se muestra: {{ titulo }}\u003C\u002Fh1\u003E\n   {% endif %}\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n```\n\n```\nURL: localhost:8000\n```\n\n![](img\u002Fparametros.jpg \"Paso de parámetros\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Ejercicios propuestos\n\n1.- Crea una sencilla página web con 2 enlaces como se explica en el tutorial.\n",cdn:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fservidor-web-con-flask-en-raspberry-pi\u002F",breadcrumbs:[{text:"Tutoriales",disabled:false,to:"\u002Ftutoriales"},{text:a,disabled:true,to:k}]}],fetch:[],mutations:[]}}("Servidor web con Flask en Python","Programación en Python para crear un servidor web en Python con Flask",Array(1),"Electrónica","Programación","Raspberry Pi","Python","Secundaria","Bachillerato","Raspbian","",{})));