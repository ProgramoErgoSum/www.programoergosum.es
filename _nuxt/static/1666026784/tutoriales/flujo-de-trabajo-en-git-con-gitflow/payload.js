__NUXT_JSONP__("/tutoriales/flujo-de-trabajo-en-git-con-gitflow", (function(a,b,c,d,e,f,g,h){c[0]="migueabellan";h.cdate="2020-07-23 00:00:00";h.mdate="2020-07-23 19:03:17";return {data:[{tutorial:{alias:"flujo-de-trabajo-en-git-con-gitflow",title:a,description:b,image:"img\u002Fpreview.jpg",contributors:c,tags:{technology:[d],hardware:[],software:[],level:[e,f],others:[]},extra:{level:"Medio",duration:"30 minutos",videos:g},date:h},title:a,description:b,image:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fflujo-de-trabajo-en-git-con-gitflow\u002Fimg\u002Fpreview.jpg",date:h,tags:[d,e,f],editLink:"https:\u002F\u002Fgithub.com\u002FProgramoErgoSum\u002FTutoriales\u002Fedit\u002Fmaster\u002Fv1\u002Fflujo-de-trabajo-en-git-con-gitflow\u002FREADME.md",contributors:c,raw:"## Introducción\n\nEn este tutorial vamos a explicar cómo trabajar con ramas en Git de una forma muy sencilla, gracias a la herramienta [Git-Flow](https:\u002F\u002Fgithub.com\u002Fnvie\u002Fgitflow) de Vincent Driessen.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## ¿Qué es Git-Flow?\n\nGit-Flow es una herramienta diseñada para el control de versiones en Git que define un modelo de ramificación robusto para gestionar proyectos de desarrollo de software.\n\n![](img\u002Fgitflow.jpg \"Ejemplo de ramas con GitFlow\")\n\nEl modelo de GitFlow cuenta con dos ramas principales, **master** y **develop**, y varias de soporte para estas que podrán ser ramas de **feature**, **release** y **hotfix**.\n\n- La rama **master** es la que contiene la última versión de nuestro proyecto y usaremos para desplegar en producción.\n- La rama **develop** es la que contiene el último estado del desarrollo del mismo, es decir, hasta el último commit que hayamos hecho.\n- Las ramas de **feature** se usarán para desarrollar nuevas funcionalidades, se crearán a partir de la rama develop y al terminar se fusiona con develop.\n- Las ramas **release** se usarán para lanzar una nueva versión de nuestro proyecto y se fusionaran tanto con master como con develop.\n- Las ramas **hotfix** se usarán para cambios rápidos sobre la rama master y se fusionan con master y develop.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Instalar GitFlow\n\nPara instalarlo sobre nuestro PC en Linux basta con lanzar la siguiente instrucción sobre la terminal:\n\n```sh\nmigueabellan@Ubuntu:~ $ sudo apt install git-flow\n```\n\nUna vez instalado y desde el directorio raiz de nuestro proyecto, tenemos que inicializarlo de forma similar a como hacemos con Git. Esto nos hará una serie de preguntas sobre como queremos nombrar a las diferentes ramas, el prefijo de nuestras versiones, etc. \n\n```sh\nmigueabellan@Ubuntu:~ $ git flow init\n```\n\nTras la inicialización observaremos que nos encontramos sobre la rama develop de nuestro repositorio. Algo similar a lo siguiente:\n\n```sh\nmigueabellan@Ubuntu:~\u002Fmiproyecto (develop) $ |\n```\n\n## Ramas Features\n\nPara empezar a desarrollar una nueva funcionalidad tenemos que crearla mediante el comando `git flow feature start [nombre]`, por ejemplo:\n\n```sh\nmigueabellan@Ubuntu:~ $ git flow feature start nueva_feature\n```\n\nObservaremos que de forma automática se ha creado la rama `nueva_feature` y estamos trabajando sobre dicha rama:\n\n```sh\nmigueabellan@Ubuntu:~\u002Fmiproyecto (develop\u002Fnueva_feature) $ |\n```\n\nUna vez consideres que has terminado la funcionalidad y tras comitear los cambios, se finaliza la rama fusionando de forma automática todos los cambios sobre la rama develop. Utilizaremos el siguiente comando:\n\n```sh\nmigueabellan@Ubuntu:~ $ git flow feature finish nueva_feature\n```\n\n## Ramas Releases\n\nDespués de haber desarrollado unas cuantas features y haberlas commiteado, queremos liberar una nueva versión de nuestro proyecto y para ello utilizaremos la rama releases de forma similar a la anterior. Es decir, creamos la rama utilizando el comando `git flow release start [nombre_version]` y una vez finalizado los cambios cerramos la rama mediante el comando `git flow release finish [nombre_version]`.\n\n```sh\nmigueabellan@Ubuntu:~ $ git flow release start version_1\n...\n...\nmigueabellan@Ubuntu:~ $ git flow release finish version_1\n```\n\nPodemos observar que en este momento se han fusionado correctamente las ramas develop y master.\n\n## Ramas Hotfix\n\nComo podemos imaginar, puede que se de el caso de querer modificar un línea o bug de nuestro código sobre la rama master sin necesidad de lanzar una nueva release. Es en este caso cuando utilizamos las ramas hotfix de forma similar a las anteriores:\n\n```sh\nmigueabellan@Ubuntu:~ $ git flow hotfix start bug_1\n...\n...\nmigueabellan@Ubuntu:~ $ git flow hotfix finish bug_1\n```\n\nUna vez solucionado el bug y cerrada la rama de hotfix, observaremos que los cambios se han fusionado sobre las ramas master y develop para que podamos seguir trabajando con normalidad.\n\n\u003Cbr \u002F\u003E\n\nComo veis GitFlow automatiza la forma de trabajar con git, aplicando un flujo de trabajo adaptándose perfectamente a la mayoría de los proyectos de desarrollo de software.\n",cdn:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fflujo-de-trabajo-en-git-con-gitflow\u002F",breadcrumbs:[{text:"Tutoriales",disabled:false,to:"\u002Ftutoriales"},{text:a,disabled:true,to:g}]}],fetch:[],mutations:[]}}("Flujo de trabajo en Git con GitFlow","Trabajando en ramas Git con la herramienta GitFlow.",Array(1),"Informática","Secundaria","Bachillerato","",{})));