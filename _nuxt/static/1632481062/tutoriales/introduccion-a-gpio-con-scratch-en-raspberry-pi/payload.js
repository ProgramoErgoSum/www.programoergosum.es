__NUXT_JSONP__("/tutoriales/introduccion-a-gpio-con-scratch-en-raspberry-pi", (function(a,b,c,d,e,f,g,h,i,j,k,l){c[0]="migueabellan";l.cdate="2017-06-01 00:00:00";l.mdate="2019-10-26 14:05:12";return {data:[{tutorial:{alias:"introduccion-a-gpio-con-scratch-en-raspberry-pi",title:a,description:b,image:"img\u002Fpreview.jpg",contributors:c,tags:{technology:[d,e],hardware:[f],software:[g],level:[h,i],others:[j,k]},extra:{level:"Iniciación",duration:"45 minutos",videos:"3 vídeos"},date:l},title:a,description:b,image:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fintroduccion-a-gpio-con-scratch-en-raspberry-pi\u002Fimg\u002Fpreview.jpg",date:l,tags:[d,e,f,g,h,i,j,k],editLink:"https:\u002F\u002Fgithub.com\u002FProgramoErgoSum\u002FTutoriales\u002Fedit\u002Fmaster\u002Fv1\u002Fintroduccion-a-gpio-con-scratch-en-raspberry-pi\u002FREADME.md",contributors:c,raw:"## Introducción\n\nEn este curso aprenderás qué son y cómo utilizar los pines GPIO de tu Raspberry Pi para activar entradas y salidas mediante el lenguaje de programación por bloques de Scratch. También aprenderás nociones básicas de electrónica para realizar numerosas prácticas desde nivel iniciación.\n\nEn el tutorial no se va a explicar el lenguaje de programación por bloques con Scratch ya que tenemos una categoría de cursos de programación con Scratch en esta misma plataforma.\nPines GPIO con Scratch\n\n![](img\u002Fpines-gpio-con-scratch.jpg \"GPIO con Scratch\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## ¿Qué es GPIO?\n\nGeneral Purpose Input Output (GPIO) es un sistema de entrada y salida de propósito general, es decir, consta de una serie de pines o conexiones que se pueden usar como entradas o salidas para múltiples usos. Estos pines están incluidos en todos los modelos de Raspberry Pi aunque con diferencias.\n\n![](img\u002Fpines-gpio.jpg \"Pines GPIO\")\n\nHay que tener en cuenta que dependiendo del modelo de la Raspberry Pi encontramos una cantidad de pines diferentes, por ejemplo, en la versión 1 de Raspberry Pi se tienen 26 pines GPIO mientras que a partir de la versión 2 de Raspberry Pi el número de pines aumentó a 40. Sin embargo la compatibilidad es total, puesto que los 26 primeros pines mantienen su función original.\n\n\u003E Revisa la ficha técnica de tu Raspberry Pi antes de utilizar los pines GPIO.\n\nComo podéis observar, el número de pines pasó de 26 a 40 para tener más disponibilidad, aunque volvemos a comentar que los 26 primeros pines son comunes para todas las versiones. Los pines GPIO tienen funciones específicas (aunque algunos comparten funciones) y se pueden agrupar de la siguiente manera:\n\n- Amarillo (2): Alimentación a 3.3V.\n- Rojo (2): Alimentación a 5V.\n- Naranja (26): Entradas \u002F salidas de proposito general. Pueden configurarse como entradas o salidas. Ten presente que el nivel alto es de 3.3V y no son tolerantes a tensiones de 5V.\n- Gris (2): Reservados.\n- Negro (8): Conexión a GND o masa.\n- Azul (2): Comunicación mediante el protocolo I2C para comunicarse con periféricos que siguen este protocolo.\n- Verde (2): Destinados a conexión para UART para puerto serie convencional.\n- Morado (5): Comunicación mediante el protocolo SPI para comunicarse con periféricos que siguen este protocolo.\n\n\u003E Todos los pines son de tipo \"unbuffered\", es decir, no disponen de buffers de protección y puedes dañar la placa con un mal uso.\n\n![](img\u002Fpines-gpio-rpi-2.jpg \"Pines GPIO Raspberry Pi 2\")\n\nExisten 2 formas de numerar los pines de la Raspberry Pi, en modo GPIO o en modo BCM.\n\n- En el modo GPIO, los pines se numeran de forma física por el lugar que ocupan en la placa (representados por el color gris) viene siendo igual para todas las versiones (comenzamos a contar desde arriba a la izquierda y finalizamos abajo a la derecha).\n- En el modo BCM, los pines se numeran por la correspondencia en el chip Broadcom (que es la CPU de la Raspberry Pi).\n\nPor este mismo motivo podéis encontrar 2 nomenclaturas a la hora de realizar las prácticas de electrónica con Raspberry Pi, cuando nos refiramos al modo GPIO o al modo BCM. A continuación mostramos una tabla de equivalencias.\n\n![](img\u002Fesquema-pines-gpio.jpg \"Esquema pines GPIO\")\n\nDe los pines GPIO disponibles, hay una serie de pines con capacidad de PWM (como volveremos más adelante). Sin ambargo no se dispone de ningún convertidor de analógico a digital. Esto quiere decir que para medir valores de sensores analógicos necesitaremos utilizar un convertidor externo o un Arduino en la mayoría de los casos.\n\n### Advertencias\n\nCuando se utilizan los pines de GPIO hay que poner mucho cuidado para no dañar la propia Raspberry Pi. Es muy importante comprobar los niveles de tensión y la corriente solicitada. Los pines de GPIO pueden generar y consumir tensiones compatibles con los circuitos de 3.3V, como la nueva electrónica. No conectar nunca componentes de 5V, o podéis quemar el chip y quedaros sin Raspberry Pi.\n\n\u003E Los pines GPIO ofrecen una tensión de 3.3V y no son tolerantes a tensiones de 5V.\n\nHay que tener presente que la intensidad de corriente que sale de esos pines proviene de la fuente de 3.3V y esta fue diseñada para una carga de unos 3mA por cada pin GPIO, suficiente para encender diodos led, pero poco más.\n\n\u003E Los pines GPIO ofrecen una corriente de 3mA.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## ¿Qué es Scratch?\n\nComo se explica en los cursos de programación con Scratch de esta misma plataforma, Scratch es un lenguaje de programación por bloques distinado a la enseñanza de la programación desde edades tempranas. La aplicación de los lenguajes de programación por bloques permiten una presentación visual del paradigma y metodología de la programación informática permitiendo centrarse en la lógica de la programación dejando a un lado la sintaxis propia de los lenguajes de programación (puntos y comas, paréntesis, etc)\n\n\u003E Scratch permite crear fácilmente historias interactivas propias, animaciones, juegos, grabar sonidos y realizar creaciones artísticas e incluso conectarse con los pines GPIO en su versión para Raspberry Pi.\n\n![](img\u002Fscratch-para-raspberry-pi.jpg \"Scratch para Raspberry Pi\")\n\n### ¿Cómo conectar Scratch con GPIO en Raspberry Pi?\n\nSi has seguido los pasos de instalación de Raspbian en esta misma plataforma podrás acceder a la versión de Scratch para procesadores ARM como el de tu Raspberry Pi.\n\nLo primero que tienes que hacer es iniciar Scratch (situado en el menú de lenguajes de programación de Raspbian) y una vez abierta la aplicación deberás acceder al apartado de más bloques de Scratch. A continuación añade una extensión y verás que aparece como extensión predefinida la extensión de Pi GPIO para Raspberry Pi.\n\n\u003E Recuerda que además de esta extensión puedes añadir otro tipo de extensión, como Lego Wedo, etc.\n\nUna vez añadida la extensión ya podrás empezar a programar los pines GPIO de tu Raspberry Pi.\n\n![](img\u002Fscratch-mas-bloques.jpg \"Más bloques\")\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Salidas digitales: Led Intermitente\n\n\u003Cdiv class=\"iframe\"\u003E\n  \u003Ciframe src=\"\u002F\u002Fwww.youtube.com\u002Fembed\u002F3qej2Ur2mLk\" allowfullscreen\u003E\u003C\u002Fiframe\u003E\n\u003C\u002Fdiv\u003E\n\nEn esta lección se va a programar y construir un led intermitente que parpadea continuamente con una frecuencia de 1 segundo. Para ello abrimos el entorno de programación Scratch de nuestra Raspberry Pi e importamos la extensión para utilizar los pines GPIO, como se explica en la lección anterior.\n\nA continuación, añadimos el bucle con las instrucciones de encender y apagar el pin GPIO deseado. En esta práctica vamos a utilizar el pin GPIO número 4 (situado en la posición número 7 de la placa).\n\n![](img\u002Fscratch-intermitente.jpg \"Intermitente\")\n\nEn nuestro caso tenemos un led de color rojo, que según la ficha técnica el fabricante nos asegura que funciona a una tensión o voltaje de 2,1V y admite una corriente máxima de 20mA. También sabemos de la lección anterior que los pines GPIO ofrecen una tensión de 3,3V y una intensidad de entre 3mA (suficiente para encender el led). De estos datos tenemos que:\n\n- El Voltaje o diferencia de potencial en el led será de 3,3V - 2,1V = 1,2V.\n- La Intensidad en el led será de 20mA (la misma que en el circuito ya que no varía).\n- La Resistencia que hay que aplicarle según la Ley de Ohm será de: R = V \u002F I = 1,2V \u002F 20mA = 60Ω, redondeando a 100Ω.\n\nLa Ley de Ohm establece que la caída de voltaje de un elemento del circuito es igual a la intensidad de corriente que circula por él, multiplicado por la resistencia que ejerce cada componente al paso de esta corriente.\n\n### Esquema eléctrico\n\nPor último, fijándonos en la tabla de los pines GPIO de nuestra Raspberry Pi, conectamos al cátodo de nuestro led el pin de masa (GND) y al ánodo del led el pin que hemos activado en la programación con Scratch, el pin GPIO 4 (pin número 7 de nuestra placa).\n\n![](img\u002Fesquema-electrico-intermitente.jpg \"Esquema eléctrico\")\n\n### Advertencias\n\n- Fíjate muy bien donde conectas el cable y mucho cuidado con equivocarte o podrás quemar la Raspberry Pi.\n- Vuelve a revisar la conexión antes de conectar los cables a la protoboard.\n- No conectes nada a 5V si no estás seguro. La raspberry Pi funciona a 3.3V y pasándole 5V supone quemar la placa.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Salidas digitales: Semáforo\n\n\u003Cdiv class=\"iframe\"\u003E\n  \u003Ciframe src=\"\u002F\u002Fwww.youtube.com\u002Fembed\u002FheWrdru_NwE\" allowfullscreen\u003E\u003C\u002Fiframe\u003E\n\u003C\u002Fdiv\u003E\n\nEn esta lección se va a programar y construir un semáforo sencillo. Para ello abrimos el entorno de programación Scratch de nuestra Raspberry Pi e importamos la extensión para utilizar los pines GPIO.\n\nEn este caso vamos a realizar la programación sencilla del semáforo sin utilizar funciones, es decir, dentro de un mismo bucle que se repite siempre programamos las funciones de los leds. Dichos diodos led estarán conectados a los pines GPIO 17, 27 y 22 correspondientes a las posiciones 11, 13 y 15 de nuestra placa.\n\nAdemás, para visualizar el estado del semáforo en la pantalla de Scratch vamos a crearle 3 disfraces para cada posición del semáforo.\n\n![](img\u002Fsemaforo-en-scratch.jpg \"Semáforo\")\n\nEn nuestro caso tenemos un led de color rojo, que según la ficha técnica el fabricante nos asegura que funciona a una tensión o voltaje de 2,1V y admite una corriente máxima de 20mA. También sabemos de la lección anterior que los pines GPIO ofrecen una tensión de 3,3V y una intensidad de entre 3mA (suficiente para encender el led). De estos datos tenemos que:\n\n- El Voltaje o diferencia de potencial en el led será de 3,3V - 2,1V = 1,2V.\n- La Intensidad en el led será de 20mA (la misma que en el circuito ya que no varía).\n- La Resistencia que hay que aplicarle según la Ley de Ohm será de: R = V \u002F I = 1,2V \u002F 20mA = 60Ω, redondeando a 100Ω.\n\nLa Ley de Ohm establece que la caída de voltaje de un elemento del circuito es igual a la intensidad de corriente que circula por él, multiplicado por la resistencia que ejerce cada componente al paso de esta corriente.\n\n### Esquema eléctrico\n\nPor último, procedemos a construir el semáforo sobre la placa de prototipado y los conectamos a los pines GPIO de nuestra Raspberry Pi como los hemos programado.\n\n![](img\u002Fesquema-electrico-semaforo.jpg \"Esquema eléctrico\")\n\n### Advertencias\n\n- Fíjate muy bien donde conectas el cable y mucho cuidado con equivocarte o podrás quemar la Raspberry Pi.\n- Vuelve a revisar la conexión antes de conectar los cables a la protoboard.\n- No conectes nada a 5V si no estás seguro. La raspberry Pi funciona a 3.3V y pasándole 5V supone quemar la placa.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Entradas digitales: Pulsador\n\n\u003Cdiv class=\"iframe\"\u003E\n  \u003Ciframe src=\"\u002F\u002Fwww.youtube.com\u002Fembed\u002FNVxUIeGziS0\" allowfullscreen\u003E\u003C\u002Fiframe\u003E\n\u003C\u002Fdiv\u003E\n\nEn esta lección se va a programar y construir un pulsador. Para ello abrimos el entorno de programación Scratch de nuestra Raspberry Pi e importamos la extensión para utilizar los pines GPIO.\n\nEn este caso vamos a realizar la programación similar a la primera lección del intermitente añadiéndole el pulsador. El led lo vamos a conectar en el pin GPIO 4 mientras que la entrada del pulsador se conectará al pin GPIO número 2 de nuestra placa de Raspberry Pi.\n\n![](img\u002Fpulsador-en-scratch.jpg \"Pulsador\")\n\nEn nuestro caso tenemos un led de color rojo, que según la ficha técnica el fabricante nos asegura que funciona a una tensión o voltaje de 2,1V y admite una corriente máxima de 20mA. También sabemos de la lección anterior que los pines GPIO ofrecen una tensión de 3,3V y una intensidad de entre 3mA (suficiente para encender el led). De estos datos tenemos que:\n\n- El Voltaje o diferencia de potencial en el led será de 3,3V - 2,1V = 1,2V.\n- La Intensidad en el led será de 20mA (la misma que en el circuito ya que no varía).\n- La Resistencia que hay que aplicarle según la Ley de Ohm será de: R = V \u002F I = 1,2V \u002F 20mA = 60Ω, redondeando a 100Ω.\n\nLa Ley de Ohm establece que la caída de voltaje de un elemento del circuito es igual a la intensidad de corriente que circula por él, multiplicado por la resistencia que ejerce cada componente al paso de esta corriente.\n\n### Esquema eléctrico\n\nPor último, procedemos a construir el pulsador sobre la placa de prototipado y los conectamos a los pines GPIO de nuestra Raspberry Pi como los hemos programado. En este caso vamos a utilizar el pin físico número 3 que equivale al GPIO 2.\n\n![](img\u002Fesquema-electrico-pulsador.jpg \"Esquema eléctrico\")\n\n### Advertencias\n\n- Fíjate muy bien donde conectas el cable y mucho cuidado con equivocarte o podrás quemar la Raspberry Pi.\n- Vuelve a revisar la conexión antes de conectar los cables a la protoboard.\n- No conectes nada a 5V si no estás seguro. La raspberry Pi funciona a 3.3V y pasándole 5V supone quemar la placa.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Salidas PWM\n\nHasta ahora hemos realizado prácticas con salidas y entradas digitales. Sin embargo, en ocasiones necesitamos señales analógicas. Es decir, en las lecciones anteriores comprobábamos si habíamos pulsado un pulsador (entrada digital) y en ese caso encendíamos un led (salida digital).\n\nEn las siguientes prácticas vamos a necesitar utilizar salidas analógicas. Puesto que en Raspberry Pi no disponemos de convertidores digital a analógico nos vemos obligados a utilizar otras técnicas para poder simular las señales analógicas en Raspberry Pi. A esta técnica se le conoce como modulación por ancho de pulsos o PWM.\n\n### ¿Qué es PWM?\n\nLa modulación por ancho de pulsos o PWM (pulse-width modulation) de una señal es una técnica en la que se modifica el ciclo de trabajo de una señal periódica para controlar la cantidad de energía que se envía, o dicho de otro modo, modificamos el tiempo de la señal para simular una señal analógica.\n\n![](img\u002Fpwm.jpg \"Salidas PWM\")\n\n### PWM en Scratch 2 para Raspberry Pi\n\nEn la versión \"ba2f624-dirty\" de Scratch en Raspbian para Raspberry Pi solamente se dispone de 2 bloques básicos para interactuar con los pines GPIO (como puedes ver en la siguiente imagen) y no podemos utilizar señales PWM (hasta el momento de grabar este tutorial). Estos bloques son los que se han utilizado en las lecciones anteriores para activar las salidas y entradas digitales.\n\n![](img\u002Fscratch-extension-defecto.jpg \"Extensión de Scratch\")\n\nPara utilizar los bloques de señales PWM en Scratch, por ejemplo para utilizar servo motores, vamos a necesitar añadir una nueva extensión creada para Scratch 2.0.\n\n![](img\u002Fscratch-extension-s2pi.jpg \"Scratch Extension S2pi\")\n\n### Extensión S2PI a Scratch 2.0\n\nEn esta lección te explicamos cómo añadir una extensión a Scratch, en concreto la \u003Ca target=\"_blank\" href=\"https:\u002F\u002Fgithub.com\u002FMrYsLab\u002Fs2-pi\"\u003Eextensión S2PI\u003C\u002Fa\u003E para disponer de bloques PWM que utilizaremos para interactuar con los pines GPIO de nuestra Raspberry Pi.\n\nSuponemos que tienes instalado el sistema operativo Raspbian para Raspberry Pi y en la versión de Scratch 2.0 no te aparecen los bloques PWM. En ese caso, lo primero que debemos hacer es instalar la extensión a través del siguiente comando en la terminal.\n\n```sh\npi@raspberrypi: ~ $ sudo pip3 install s2-pi\n```\n\nA continuación habilitamos e iniciamos el servidor que escucha los pines GPIO de nuestra Raspberry Pi con los siguientes comandos en la terminal. Por último arrancamos Scratch 2.0 desde la terminal.\n\n```sh\npi@raspberrypi: ~ $ sudo systemctl enable pigpiod\npi@raspberrypi: ~ $ sudo systemctl start pigpiod\npi@raspberrypi: ~ $ s2pi\n```\n\nUna vez arrancado Scratch 2.0 tendremos que añadir la extensión situada en la ruta \u002Fhome\u002Fpi\u002Fs2_pi.js en modo experimental como puedes ver en la siguiente imagen. Recuerda que para que aparezcan las opciones extendidas de Scratch debes hacer clic al mismo tiempo que pulsas la tecla SHIFT.\n\n![](img\u002Fanadir-extension.jpg \"Añadir extensión\")\n\n¡Recuerda! Cada vez que necesites utilizar la extensión deberás cargarla realizando los mismos pasos tras la instalación (habilitar e iniciar pigpiod, arrancar s2pi y cargar extensión experimental).\n",cdn:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fintroduccion-a-gpio-con-scratch-en-raspberry-pi\u002F",breadcrumbs:[{text:"Tutoriales",disabled:false,to:"\u002Ftutoriales"},{text:a,disabled:true,to:""}]}],fetch:[],mutations:[]}}("Introducción a GPIO con Scratch en Raspberry Pi","Programa con Scratch en los pines GPIO de tu Raspberry Pi para activar entradas y salidas.",Array(1),"Electrónica","Programación","Raspberry Pi","Scratch","Secundaria","Bachillerato","Raspbian","GPIO",{})));