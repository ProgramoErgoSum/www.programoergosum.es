__NUXT_JSONP__("/tutoriales/servidor-web-con-esp8266", (function(a,b,c,d,e,f,g,h,i,j){c[0]="migueabellan";j.cdate="2019-01-26 15:57:33";j.mdate="2019-07-09 14:05:12";return {data:[{tutorial:{alias:"servidor-web-con-esp8266",title:a,description:b,image:"img\u002Fpreview.jpg",contributors:c,tags:{technology:[d,e],hardware:[f],software:[g],level:[h],others:[]},extra:{level:"Avanzado",duration:"120 minutos",videos:i},date:j},title:a,description:b,image:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fservidor-web-con-esp8266\u002Fimg\u002Fpreview.jpg",date:j,tags:[d,e,f,g,h],editLink:"https:\u002F\u002Fgithub.com\u002FProgramoErgoSum\u002FTutoriales\u002Fedit\u002Fmaster\u002Fv1\u002Fservidor-web-con-esp8266\u002FREADME.md",contributors:c,raw:"## Introducción\n\nEn este tutorial vamos a crear un **servidor web para controlar los pines GPIO** de nuestra placa NodeMCU ESP8266 y encender o apagar un LED desde el móvil conectado a la WiFi.\n\n### Antes de empezar\n\nPara este tutorial vas a necesitar los siguientes componentes:\n\n- NodeMCU o equivalente\n- Arduino IDE con placa NodeMCU ESP12\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Conectando a la WiFi\n\nEn primer lugar debemos ser capaces de conectar nuestra placa ESP8266 a la WiFi como se explica en tutoriales anteriores. En este tutorial además asignaremos una dirección IP fija a nuestra placa para que siempre tenga la misma aunque se desconecte de la WiFi. Por último accederemos desde el móvil para controlar diferentes pines GPIO.\n\n### IP Fija en ESP8266\n\nDe forma similar que cuando nos conectábamos a una red WiFi, nuestro router nos asigna de forma automática una dirección IP. Sin embargo, podemos asignar una IP fuera del rango que ofrece el router para controlar nuestra placa con una IP Fija.\n\nEn este caso, vamos a conectar nuestra ESP8266 a la IP *192.168.0.200* en la cual nos hemos asegurado que está disponible y fuera de la asignación automática por nuestro router.\n\n![](img\u002Fipfija.jpg)\n\nLo que tenemos que añadir a nuestro código, es la asignación de dicha dirección IP, Puerta de Enalce (dirección IP del Router) y Máscara de Red.\n\nEn la función `setup()`, además de establecer la conexión en modo cliente añadimos la configuración de los parámetros para que asigne los establecidos por nosotros.\n\nEn la función `loop()` mostramos la IP que hemos asignado para comprobar que todo ha funcionado correctamente.\n\n```arduino\n#include \u003CESP8266WiFi.h\u003E\n\nconst char* ssid     = \"******\";\nconst char* password = \"******\";\n\n\u002F\u002F Establecer IP, Puerta de Enlace y Máscara\nIPAddress ip(192,168,0,200);\nIPAddress gateway(192,168,0,1);\nIPAddress subnet(255,255,255,0);\n\nvoid setup() {\n  Serial.begin(115200);\n\n  \u002F\u002F Conectar a la WiFi\n  WiFi.begin(ssid, password);\n\n  \u002F\u002F Modo cliente\n  WiFi.mode(WIFI_STA);\n  WiFi.config(ip, gateway, subnet);\n\n  \u002F\u002F Esperar hasta conectar\n  while (WiFi.status() != WL_CONNECTED)\n    delay(200);\n}\n\nvoid loop(){\n  \u002F\u002F Comprobar si estamos conectados\n  if (WiFi.status() == WL_CONNECTED) {\n    Serial.print(\"Conectado a \");\n    Serial.println(WiFi.localIP());\n  }\n  \n  delay(5000);\n}\n```\n\n### Servidor Web en ESP8266\n\nUna vez tenemos fija la dirección IP, vamos a añadir la funcionalidad para comunicarnos con la placa ESP8266 a través de un navegador conectado a la misma red.\n\nEn primer lugar vamos a mostrar un código HTML con el mensaje *Hola Mundo*.\n\n![](img\u002Fhola-mundo.jpg)\n\nEn primer lugar necesitamos añadir la librería `ESP8266WebServer.h` encargada de controlar el servidor web. Además, le indicamos que el puerto por el cual se va a escuchar es el puerto 80.\n\nEn la función `setup()` le indicamos que tras la petición \"\u002F\" o raiz, llamaremos a la función `handleRoot()` encargada de mostrar el mensaje 'Hola Mundo'.\n\nEn la función `loop()` solamente hemos añadido la escucha de clientes en caso de estar conectados a la WiFi.\n\n```arduino\n#include \u003CESP8266WiFi.h\u003E\n#include \u003CESP8266WebServer.h\u003E \n\nconst char* ssid     = \"******\";\nconst char* password = \"******\";\n\n\u002F\u002F Establecer IP, Puerta de Enlace y Máscara\nIPAddress ip(192,168,0,200);\nIPAddress gateway(192,168,0,1);\nIPAddress subnet(255,255,255,0);\n\n\u002F\u002F Puerto del servidor web\nESP8266WebServer server(80);\n\nvoid setup() {\n  Serial.begin(115200);\n\n  \u002F\u002F Conectar a la WiFi\n  WiFi.begin(ssid, password);\n\n  \u002F\u002F Modo cliente\n  WiFi.mode(WIFI_STA);\n  WiFi.config(ip, gateway, subnet);\n\n  \u002F\u002F Esperar hasta conectar\n  while (WiFi.status() != WL_CONNECTED)\n    delay(200);\n\n  \u002F\u002F Arrancar el servidor\n  server.on(\"\u002F\", handleRoot);\n  server.begin();\n}\n\nvoid loop(){\n  \u002F\u002F Comprobar si estamos conectados\n  if (WiFi.status() == WL_CONNECTED) {\n    server.handleClient();\n  }\n  \n}\n\nvoid handleRoot() {\n  server.send(200, \"text\u002Fplain\", \"Hola Mundo\");\n}\n```\n\n### Pines GPIO mediante webservice\n\nSabiendo que podemos acceder a la raiz del servidor web, podemos imaginar que podríamos acceder a diferentes direcciones, como `\u002Fled-1\u002Fencender` o `\u002Fled-1\u002Fapagar`.\n\n![](img\u002Fleds.jpg)\n\nEn este caso hemos creado 2 endpoints o urls más `\u002F14\u002Fon` y `\u002F14\u002Foff` y cada una de ellas está asignada a una función `encender()` y `apagar()` respectivamente. En ambas funciones hemos añadido el pin GPIO 14 con la función de encender o apagar dicho pin.\n\n\u003E Recuerda mirar la equivalencia de pines GPIO en tu placa NodeMCU como se explica en el anterior tutorial.\n\n```arduino\n#include \u003CESP8266WiFi.h\u003E\n#include \u003CESP8266WebServer.h\u003E \n\nconst char* ssid     = \"******\";\nconst char* password = \"******\";\n\n\u002F\u002F Establecer IP, Puerta de Enlace y Máscara\nIPAddress ip(192,168,0,200);\nIPAddress gateway(192,168,0,1);\nIPAddress subnet(255,255,255,0);\n\n\u002F\u002F Puerto del servidor web\nESP8266WebServer server(80);\n\nvoid setup() {\n  Serial.begin(115200);\n\n  \u002F\u002F Conectar a la WiFi\n  WiFi.begin(ssid, password);\n\n  \u002F\u002F Modo cliente\n  WiFi.mode(WIFI_STA);\n  WiFi.config(ip, gateway, subnet);\n\n  \u002F\u002F Esperar hasta conectar\n  while (WiFi.status() != WL_CONNECTED)\n    delay(200);\n\n  \u002F\u002F Arrancar el servidor\n  server.on(\"\u002F\", handleRoot);\n  server.on(\"\u002F14\u002Fon\", encender);\n  server.on(\"\u002F14\u002Foff\", apagar);\n  server.begin();\n\n  \u002F\u002F Led\n  pinMode(14, OUTPUT);\n}\n\nvoid loop(){\n  \u002F\u002F Comprobar si estamos conectados\n  if (WiFi.status() == WL_CONNECTED) {\n    server.handleClient();\n  }\n  \n}\n\nvoid handleRoot() {\n  server.send(200, \"text\u002Fplain\", \"Hola Mundo\");\n}\n\nvoid encender() {\n  server.send(200, \"text\u002Fplain\", \"Encender\");\n  digitalWrite(14, HIGH);\n}\n\nvoid apagar() {\n  server.send(200, \"text\u002Fplain\", \"Apagar\");\n  digitalWrite(14, LOW);\n}\n```\n\n![](img\u002Fhtml-href.gif)\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Ejercicios propuestos\n\n1.- Añade un semáforo para controlarlo desde la web en otro PC o movil de la misma red.\n\n2.- Añade un código en html para mostrar un botón de on y otro de off.\n\n3.- Añade más componentes de electrónica, como servomotores, etc.\n",cdn:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fservidor-web-con-esp8266\u002F",breadcrumbs:[{text:"Tutoriales",disabled:false,to:"\u002Ftutoriales"},{text:a,disabled:true,to:i}]}],fetch:[],mutations:[]}}("Servidor Web con ESP8266","Crea una servidor web para controlar los pines GPIO de la ESP8266 desde el móvil.",Array(1),"Electrónica","Programación","ESP8266","Arduino IDE","Bachillerato","",{})));