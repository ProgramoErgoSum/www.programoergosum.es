__NUXT_JSONP__("/tutoriales/pines-gpio-en-microbit-con-python", (function(a,b,c,d,e,f,g,h,i,j,k){c[0]="migueabellan";k.cdate="2019-02-11 13:42:34";k.mdate="2019-10-26 14:05:12";return {data:[{tutorial:{alias:"pines-gpio-en-microbit-con-python",title:a,description:b,image:"img\u002Fpreview.jpg",contributors:c,tags:{technology:[d,e],hardware:[f],software:[g],level:[h,i],others:[]},extra:{level:"Medio",duration:"30 minutos",videos:j},date:k},title:a,description:b,image:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fpines-gpio-en-microbit-con-python\u002Fimg\u002Fpreview.jpg",date:k,tags:[d,e,f,g,h,i],editLink:"https:\u002F\u002Fgithub.com\u002FProgramoErgoSum\u002FTutoriales\u002Fedit\u002Fmaster\u002Fv1\u002Fpines-gpio-en-microbit-con-python\u002FREADME.md",contributors:c,raw:"## Introducción\n\nEn este tutorial vamos a explicar cómo utilizar los pines IO de micro:bit para interactuar con ellos y construir diferentes programas utilizando el lenguaje de programación MicroPython.\n\n### Antes de empezar\n\nVas a necesitar los siguientes componentes:\n\n- Raspberry Pi con Raspbian\n- Micro:Bit\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Pines en Micro:bit\n\nMicro:bit tiene 25 conexiones externas llamadas *pines*. Dispone de cinco pines de conexión conectados con los agujeros en la placa marcados con las serigrafías *0, 1, 2, 3V y GND*, y 20 pequeños pines que se pueden utilizar al conectar micro:bit a un conector de borde.\n\n\u003E Puedes acceder a la referencia de los [pines](https:\u002F\u002Fmicrobit-micropython.readthedocs.io\u002Fen\u002Flatest\u002Fpin.html) desde la documentación oficial de Micro:bit.\n\n![](img\u002Fpines.jpg)\n\nLos pines 0, 1 y 2 son flexibles y se puede utilizar como pines de propósito general de entrada y salida (GPIO). Tiene la habilidad de leer voltajes analógicos usando un convertidor de analógico a digital (ADC) con lo cual se puede utilizar para el efecto de las placas makey-makey. Las clavijas 3V y GND se utilizan para la alimentación.\n\nEl resto de pines pequeños tienen algunas diferencias entre ellos. Algunos son compartidos con otros componentes en la placa, como el pin 3 es compartido con algunos de los LEDs de la matriz de LEDs.\n\n\u003E Para la utilización de los pines pequeños se recomienda utilizar un conector de borde comprado por separado normalmente.\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Función is_touched()\n\nLa primera función que vamos a ver es `is_touched()` encargada de comprobar si estamos tocando un determinado pin. De tal manera que el código encargado de comprobar si estamos tocando el pin 0 será `pin0.is_touched()`.\n\nEn el siguiente ejemplo al tocar con una mano el pin GND y con la otra el pin 0 deberá mostrarse una cara feliz en la matriz de LEDs.\n\n```python\nfrom microbit import *\n\nwhile True:\n   if pin0.is_touched():\n      display.show(Image.HAPPY)\n   else:\n      display.show(Image.SAD)\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Función read_digital()\n\nDe forma similar a la anterior, con la función `read_digital()` podemos leer un valor digital en un determinado pin. \n\n```python\nfrom microbit import *\n\nwhile True:\n   if pin0.read_digital():\n      display.show(Image.HAPPY)\n   else:\n      display.show(Image.SAD)\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Función write_digital()\n\nCon la función `write_digital()` podemos escribir un valor digital en un determinado pin. Por ejemplo, vamos a programar un LED intermitente utilizando el pin 0. \n\n```python\nfrom microbit import *\n\nwhile True:\n   pin0.write_digital(1)\n   sleep(1000)\n   pin0.write_digital(0)\n   sleep(1000)\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Función read_analog()\n\nDe forma similar a la anterior, con la función `read_analog()` podemos leer un valor analógico en un determinado pin. \n\n```python\nfrom microbit import *\n\nwhile True:\n   if pin0.read_analog() \u003E 100:\n      display.show(Image.HAPPY)\n   else:\n      display.show(Image.SAD)\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Función write_analog()\n\nCon la función `write_analog()` podemos escribir un valor analógico en un determinado pin. Por ejemplo, vamos a programar un LED para que se encienda poco a poco. \n\n```python\nfrom microbit import *\n\nwhile True:\n   for i in range(0, 256, 1):\n      pin0.write_analog(i)\n      sleep(50)\n```\n\n\n\n\u003Cbr \u002F\u003E\n\n\n\n## Ejercicios propuestos\n\n1.- Crea un sencillo semáforo.\n\n2.- Utiliza los pulsadores de la placa para encender diferentes LEDs conectados al GPIO.\n\n3.- Utilizando un sensor LDR enciende o apaga la matriz de LEDs dependiendo de la intensidad de luz en el ambiente.\n\n4.- Mueve un servomotor utilizando los pines los botones de la microbit.\n",cdn:"https:\u002F\u002Fraw.githubusercontent.com\u002FProgramoErgoSum\u002FTutoriales\u002Fmaster\u002Fv1\u002Fpines-gpio-en-microbit-con-python\u002F",breadcrumbs:[{text:"Tutoriales",disabled:false,to:"\u002Ftutoriales"},{text:a,disabled:true,to:j}]}],fetch:[],mutations:[]}}("Pines GPIO en Microbit con Python","Utiliza los pines de entrada y salida de Micro:bit con MicroPython.",Array(1),"Electrónica","Programación","Micro:bit","Python","Secundaria","Bachillerato","",{})));